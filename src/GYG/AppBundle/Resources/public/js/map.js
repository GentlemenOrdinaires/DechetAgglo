var DrawOnMap = {    drawingOptions: {        polygon: 'Polygon',        lineString: 'LineString',        point: 'Point',        multiPoint: 'MultiPoint',        multiLineString: 'MultiLineString',        multiPolygon: 'MultiPolygon'    },    //Initialize the map api and create a map on the front    initialize: function (startOption, map) {        var drawingOverlay;        map = new ol.Map({            target: 'map',            layers: [                new ol.layer.Tile({                    source: new ol.source.MapQuest({layer: 'osm'})                })            ],            view: new ol.View({                center: [startOption.initLat, startOption.initLong],                zoom: startOption.initZoom            })        });        drawingOverlay = this._initializeDrawingLayer(map);        if(startOption.editable) {            this._addModifyInteraction(map, drawingOverlay);            this._addDrawingInteraction(startOption.drawType, startOption.singleDrawMode, map, drawingOverlay);        }        return drawingOverlay;    },    //Initialize the layer where the features (points) are placed    _initializeDrawingLayer: function(map) {        drawingOverlay = new ol.FeatureOverlay({            style: new ol.style.Style({                fill: new ol.style.Fill({                    color: 'rgba(100, 100, 100, 0.2)'                }),                stroke: new ol.style.Stroke({                    color: '#FF3A28',                    width: 3                }),                image: new ol.style.Circle({                    radius: 10,                    fill: new ol.style.Fill({                        color: '#FF3A28'                    }),                    stroke: new ol.style.Stroke({                        color: '#ffffff',                        width: 3                    })                })            })        })        drawingOverlay.setMap(map);        return drawingOverlay;    },    //Initialize the modify interaction to move an already placed point    _addModifyInteraction: function(map, drawingOverlay) {        var modify = new ol.interaction.Modify({            features: drawingOverlay.getFeatures(),            deleteCondition: function(event) {                return ol.events.condition.shiftKeyOnly(event) && ol.events.condition.singleClick(event);            }        });        map.addInteraction(modify);    },    //Initialize the drawing interaction    _addDrawingInteraction: function(typeOfDrawing, singleFeatureMode, map, drawingOverlay) {        var draw = new ol.interaction.Draw({            features: drawingOverlay.getFeatures(),            type: typeOfDrawing,            condition: function(event) {                if(singleFeatureMode) {                    console.log(drawingOverlay.getFeatures().getLength());                    return drawingOverlay.getFeatures().getLength() < 1;                }                return true;            },            freehandCondition: function(event) {                return false;            }        });        map.addInteraction(draw);    },    setData: function(drawingOverlay, json) {        var interactions;        var features;        var modify;        var map = drawingOverlay.getMap();        interactions = map.getInteractions().getArray();        interactions.forEach(function(item, index, array){           if(item instanceof ol.interaction.Modify) {               modify = item;               map.removeInteraction(item);           }        });        features = (new ol.format.GeoJSON()).readFeatures(json);        features.forEach(function(item, index, array) {            drawingOverlay.addFeature(item);        });        modify.features = drawingOverlay.getFeatures();        map.addInteraction(modify);    },    getData: function(drawingOverlay) {        var res;        var features;        features = drawingOverlay.getFeatures().getArray();        res = (new ol.format.GeoJSON()).writeFeatures(features);        return res;    }}